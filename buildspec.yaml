version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.13
    commands:
      - curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/1.0.1/terraform_1.0.1_linux_amd64.zip
      - unzip -qq terraform.zip
      - |
        #!/bin/bash
        DB=$(aws dynamodb describe-table --table-name $DYNAMODB_NAME --output json --query 'Table.TableName' || true)
        if [ -z "$DB" ]; then
          aws dynamodb create-table --table-name $DYNAMODB_NAME --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          echo "$DYNAMODB_NAME created"
        else
          echo "$DYNAMODB_NAME already exists"
        fi
      - |
        #!/bin/bash
        BUCKET=$(aws s3 ls s3://$BUCKET_NAME || true)
        if [ -z "$BUCKET" ]; then
          aws s3api create-bucket –bucket $BUCKET_NAME –region $AWS_REGION –create-bucket-configuration LocationConstraint=$AWS_REGION
          "aws s3api put-bucket-encryption –bucket $BUCKET_NAME –server-side-encryption-configuration '{\'Rules\': [{\'ApplyServerSideEncryptionByDefault\':{\'SSEAlgorithm\': \'AES256\'}}]}"
          aws s3api put-bucket-versioning --bucket $BUCKET_NAME --versioning-configuration Status=Enabled
          echo "$BUCKET_NAME created"
        else
          echo "$BUCKET_NAME already exists"
        fi
      - rm -rf /usr/local/go
      - curl -s -qL https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
      - tar -C /usr/local -xzf ./go1.16.5.linux-amd64.tar.gz
      - git clone https://github.com/gohugoio/hugo.git
      - cd hugo
      - go install --tags extended

  build:
    commands:
      - cd ../website
      - git init
      - git submodule add https://github.com/hugo-toha/toha.git themes/toha
      - hugo

  post_build:
    commands:
      - cd ../infrastructure
      - $PWD/terraform init -backend-config=bucket=$BUCKET_NAME -backend-config=dynamodb_table=$DYNAMODB_NAME -backend-config=key=$GITHUB_REPO -backend-config=region=$AWS_REGION
      - $PWD/terraform plan -out=tfplan -var-file=pro.tfvars -var=aws_access_key=$AWS_ACCESS_KEY -var=aws_secret_key=$AWS_SECRET_KEY -var=github_token=$GITHUB_TOKEN -var=alerting_sms_number=$ALERTING_SMS_NUMBER -var=aws_region=$AWS_REGION
      - $PWD/terraform apply tfplan

artifacts:
  files:
    - '**/*'